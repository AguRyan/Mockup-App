{
  "kind": "Template",
  "apiVersion": "v1",
  "metadata": {
    "name": "Mockup-App",
    "annotations": {
      "openshift.io/display-name": "Mockup Node.js",
      "description": "An APP to creates Mockups",
      "tags": "nodejs",
      "iconClass": "icon-nodejs",
      "openshift.io/long-description": "",
      "openshift.io/provider-display-name": "Red Hat, Inc.",
      "openshift.io/documentation-url": "https://github.com/AguRyan/Mockup-App",
      "openshift.io/support-url": "https://access.redhat.com",
      "template.openshift.io/bindable": "false"
    }
  },
  "message": "The following service(s) have been created in your project: ${NAME}.",
  "labels": {
    "template": "nodejs-mockup"
  },
  "objects": [
     {
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${NAME}"
      },
      "spec": {
        "ports": [
          {
            "name": "web",
            "port": 3000,
            "targetPort": 3000
          }
        ],
        "selector": {
          "name": "${NAME}"
        }
      }
    },
    {
      "kind": "Route",
      "apiVersion": "v1",
      "metadata": {
        "name": "${NAME}"
      },
      "spec": {
        "host": "${APPLICATION_DOMAIN}",
        "to": {
          "kind": "Service",
          "name": "${NAME}"
        }
      }
    },
    {
      "kind": "ImageStream",
      "apiVersion": "v1",
      "metadata": {
        "name": "${NAME}",
        "annotations": {
          "description": "Keeps track of changes in the application image"
        }
      }
    },
    {
      "kind": "BuildConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${NAME}",
        "annotations": {
          "description": "Defines how to build the application",
          "template.alpha.openshift.io/wait-for-ready": "true"
        }
      },
      "spec": {
        "source": {
          "type": "Git",
          "git": {
            "uri": "${SOURCE_REPOSITORY_URL}",
            "ref": "${SOURCE_REPOSITORY_REF}"
          },
          "contextDir": "${CONTEXT_DIR}"
        },
        "strategy": {
          "type": "Source",
          "sourceStrategy": {
            "from": {
              "kind": "ImageStreamTag",
              "namespace": "${NAMESPACE}",
              "name": "nodejs:latest"
            },
            "env":  [
              {
                "name": "NPM_MIRROR",
                "value": "${NPM_MIRROR}"
              }
            ]
          }
        },
        "output": {
          "to": {
            "kind": "ImageStreamTag",
            "name": "${NAME}:latest"
          }
        },
        "triggers": [
          {
            "type": "ImageChange"
          },
          {
            "type": "ConfigChange"
          },
          {
            "type": "GitHub",
            "github": {
              "secret": "${GITHUB_WEBHOOK_SECRET}"
            }
          },
          {
            "type": "Generic",
            "generic": {
              "secret": "${GENERIC_WEBHOOK_SECRET}"
            }
          }
        ],
        "postCommit": {
          "script": "npm test"
        }
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${NAME}",
        "annotations": {
          "description": "Defines how to deploy the application server",
          "template.alpha.openshift.io/wait-for-ready": "true"
        }
      },
      "spec": {
        "strategy": {
          "type": "Recreate"
        },
        "triggers": [
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "nodejs-mongo-persistent"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            }
          },
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "selector": {
          "name": "${NAME}"
        },
        "template": {
          "metadata": {
            "name": "${NAME}",
            "labels": {
              "name": "${NAME}"
            }
          },
          "spec": {
            "containers": [
              {
                "name": "nodejs-mockup",
                "image": " ",
                "ports": [
                  {
                    "containerPort": 3000
                  }
                ],
                "env": [
				
				  {
                    "name": "POST_API_PATH",
                    "value": "${POST_API_PATH}"
                  },
				  {
                    "name": "GET_API_PATH",
                    "value": "${GET_API_PATH}"
                  },
				  {
                    "name": "PUT_API_PATH",
                    "value": "${PUT_API_PATH}"
                  },
				  {
                    "name": "DELETE_API_PATH",
                    "value": "${DELETE_API_PATH}"
                  },
                  {
                    "name": "POST_REQUIRED_KEYS",
                    "value": "${POST_REQUIRED_KEYS}"
                  },
				  {
                    "name": "GET_REQUIRED_KEYS",
                    "value": "${GET_REQUIRED_KEYS}"
                  },
				  {
                    "name": "PUT_REQUIRED_KEYS",
                    "value": "${PUT_REQUIRED_KEYS}"
                  },
				  {
                    "name": "DELETE_REQUIRED_KEYS",
                    "value": "${DELETE_REQUIRED_KEYS}"
                  },
				  {
                    "name": "POST_KEY_RESPONSE_500",
                    "value": "${POST_KEY_RESPONSE_500}"
                  },
				  {
                    "name": "GET_KEY_RESPONSE_500",
                    "value": "${GET_KEY_RESPONSE_500}"
                  },
				  {
                    "name": "PUT_KEY_RESPONSE_500",
                    "value": "${PUT_KEY_RESPONSE_500}"
                  },
				  {
                    "name": "DELETE_KEY_RESPONSE_500",
                    "value": "${DELETE_KEY_RESPONSE_500}"
                  },
				  {
                    "name": "POST_BODY_RESPONSE_500",
                    "value": "${POST_BODY_RESPONSE_500}"
                  },
				  {
                    "name": "GET_BODY_RESPONSE_500",
                    "value": "${GET_BODY_RESPONSE_500}"
                  },
				  {
                    "name": "PUT_BODY_RESPONSE_500",
                    "value": "${PUT_BODY_RESPONSE_500}"
                  },
				  {
                    "name": "DELETE_BODY_RESPONSE_500",
                    "value": "${DELETE_BODY_RESPONSE_500}"
                  },
				  {
                    "name": "POST__BODY_RESPONSE_OK",
                    "value": "${POST_BODY_RESPONSE_OK}"
                  },
				  {
                    "name": "GET_BODY_RESPONSE_OK",
                    "value": "${GET_BODY_RESPONSE_OK}"
                  },
				  {
                    "name": "PUT_BODY_RESPONSE_OK",
                    "value": "${PUT_BODY_RESPONSE_OK}"
                  },
				  {
                    "name": "DELETE_BODY_RESPONSE_OK",
                    "value": "${DELETE_BODY_RESPONSE_OK}"
                  }
                ],
                "readinessProbe": {
                  "timeoutSeconds": 3,
                  "initialDelaySeconds": 3,
                  "httpGet": {
                    "path": "/",
                    "port": 3000
                  }
                },
                "livenessProbe": {
                  "timeoutSeconds": 3,
                  "initialDelaySeconds": 30,
                  "httpGet": {
                    "path": "/",
                    "port": 3000
                  }
                },
                "resources": {
                  "limits": {
                    "memory": "512Mi"
                  }
                }
              }
            ]
          }
        }
      }
    }
  ],
  "parameters": [
    {
      "name": "NAME",
      "displayName": "Name",
      "description": "The name assigned to all of the frontend objects defined in this template.",
      "required": true,
      "value": "NodejsMockup"
    },
    {
      "name": "NAMESPACE",
      "displayName": "Namespace",
      "description": "The OpenShift Namespace where the ImageStream resides.",
      "required": true,
      "value": "openshift"
    },
    {
      "name": "SOURCE_REPOSITORY_URL",
      "displayName": "Git Repository URL",
      "description": "The URL of the repository with your application source code.",
      "required": true,
      "value": "https://github.com/AguRyan/Mockup-App.git"
    },
    {
      "name": "SOURCE_REPOSITORY_REF",
      "displayName": "Git Reference",
      "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch."
    },
    {
      "name": "CONTEXT_DIR",
      "displayName": "Context Directory",
      "description": "Set this to the relative path to your project if it is not in the root of your repository."
    },
    {
      "name": "APPLICATION_DOMAIN",
      "displayName": "Application Hostname",
      "description": "The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.",
      "value": ""
    },
    {
      "name": "GITHUB_WEBHOOK_SECRET",
      "displayName": "GitHub Webhook Secret",
      "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{40}"
    },
    {
      "name": "GENERIC_WEBHOOK_SECRET",
      "displayName": "Generic Webhook Secret",
      "description": "A secret string used to configure the Generic webhook.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{40}"
    },
    {
      "name": "POST_API_PATH",
      "displayName": "PATH for a POST method"
    },
    {
      "name": "POST_REQUIRED_KEYS",
      "displayName": "Required Keys in a body for a POST method (comma separated)"
    },
	{
      "name": "POST_KEY_RESPONSE_500",
      "displayName": "A Key to simulate a 500 error in a POST method (key=value)"
    },
	{
      "name": "POST_BODY_RESPONSE_500",
      "displayName": "Body for response the 500 error (JSON)"
    },
	{
      "name": "POST_BODY_RESPONSE_OK",
      "displayName": "Body for response OK (JSON)"
    },
	{
      "name": "GET_API_PATH",
      "displayName": "PATH for a GET method"
    },
	{
      "name": "GET_REQUIRED_KEYS",
      "displayName": "Required Keys in a body for a GET method (comma separated)"
    },
	{
      "name": "GET_KEY_RESPONSE_500",
      "displayName": "A Key to simulate a 500 error in a GET method (key=value)"
    },
	{
      "name": "GET_BODY_RESPONSE_500",
      "displayName": "Body for response the 500 error (JSON)"
    },
	{
      "name": "GET_BODY_RESPONSE_OK",
      "displayName": "Body for response OK (JSON)"
    },
    {
      "name": "PUT_API_PATH",
      "displayName": "PATH for a PUT method"
    },
	{
      "name": "PUT_REQUIRED_KEYS",
      "displayName": "Required Keys in a body for a PUT method (comma separated)"
    },
	{
      "name": "PUT_KEY_RESPONSE_500",
      "displayName": "A Key to simulate a 500 error in a PUT method (key=value)"
    },
	{
      "name": "PUT_BODY_RESPONSE_500",
      "displayName": "Body for response the 500 error (JSON)"
    },
	{
      "name": "PUT_BODY_RESPONSE_OK",
      "displayName": "Body for response OK (JSON)"
    },
    {
      "name": "DELETE_API_PATH",
      "displayName": "PATH for a DELETE method"
    },
	{
      "name": "DELETE_REQUIRED_KEYS",
      "displayName": "Required Keys in a body for a DELETE method (comma separated)"
    },
	{
      "name": "DELETE_KEY_RESPONSE_500",
      "displayName": "A Key to simulate a 500 error in a DELETE method (key=value)"
    },
	{
      "name": "DELETE_BODY_RESPONSE_500",
      "displayName": "Body for response the 500 error (JSON)"
    },
	{
      "name": "DELETE_BODY_RESPONSE_OK",
      "displayName": "Body for response OK (JSON)"
    },
    {
      "name": "NPM_MIRROR",
      "displayName": "Custom NPM Mirror URL",
      "description": "The custom NPM mirror URL",
      "value": ""
    }
  ]
}
